{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPmxocGIgaUPJjk2vPBo5rt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Disponível a partir de: sexta, 7 Jul 2023, 08:00\n"," Data de entrega: quinta, 13 Jul 2023, 12:00\n"," Número máximo de arquivos: 1\n","Tipo de trabalho:  Trabalho individual\n","Esta atividade de aplicação vale nota.\n","Prazo de entrega: dia 13/julho 12:00. Não deixe para última hora. Problemas técnicos não serão aceitos como desculpa para entregas atrasadas.\n","\n","O objetivo deste trabalho é usar a biblioteca pandas do Python para analisar arquivos CSV com dados de diferentes cidades brasileiras disponibilizados pelo Laboratório de Eficiência Energética em Edificações. Cada arquivo CSV representa uma cidade, e cada linha tem dados de medições de diversas métricas organizados por mês, dia, e hora de coleta. Neste trabalho, você criará um programa que lê um arquivo CSV, e, partir da leitura, irá informar diversos dados na tela.\n","\n","Entrada do programa: quatro linhas, como descrito a seguir:\n","Nome do arquivo CSV a ser processado;\n","Um número inteiro D representando um dia do mês;\n","Um número inteiro M representando um dia do mês;\n","Um número decimal R representando um valor de radiação direta normal.\n","Saída: os seguintes dados deverão ser impressos na saída, nesta ordem:\n","Uma frase do tipo \"Mediana da densidade do ar: X.XX kg/m3\", em que X.XX é mediana de todas as medidas de densidade do ar no arquivo. Esse valor deve ser apresentado aproximado para duas casas decimais;\n","Uma frase do tipo \"Maxima velocidade do vento: X.XX m/s\", em que X.XX é o valor máximo entre todas as medidas de velocidade do vento no arquivo. Esse valor deve ser apresentado aproximado para duas casas decimais;\n","Uma frase do tipo \"Entalpia minima: X.XX btu/lb\", em que X.XX é o valor mínimo entre todas as medidas de entalpia no arquivo. Esse valor deve ser apresentado aproximado para duas casas decimais;\n","Uma frase do tipo \"Media da direcao do vento no dia #D do mes #M: X.XX graus\" em que \"#D\" é o dia D lido da entrada, \"#M\" é o mês M lido da entrada, e X.XX é média das medidas de direção do vento do arquivo coletadas no dia D do mês M. Esse último valor deve ser apresentado aproximado para duas casas decimais;\n","Uma linha com único número representando o número de registros no arquivo cuja radiação direta normal é maior ou igual a R.\n","\n","\n","Exemplo de entrada:\n","belem.csv\n","10\n","2\n","200\n","Exemplo de saída:\n","Mediana da densidade do ar: 1.15 kg/m3\n","Maxima velocidade do vento: 10.00 m/s\n","Entalpia minima: 55.80 btu/lb\n","Media da direcao do vento no dia 10 do mes 2: 75.00 graus\n","2309\n","\n","\n","DICAS (LEIA TUDO ANTES DE TIRAR DÚVIDAS):\n","Use o material da unidade 4 para ver como usar a biblioteca pandas, como fazer query, filtros, etc;\n","Você pode carregar o arquivo CSV no caderno do Google Colab usando os comandos vistos no material da unidade 4. No entanto, para a solução funcionar no Moodle, use somente o comando read_csv da biblioteca pandas passando a string lida da entrada como parâmetro. Não é necessário usar os comandos \"from google.colab import files\" nem \"import io\";\n","Todos os arquivos usados nos testes automáticos estão disponibilizados na Unidade 4;\n","Os comandos a seguir podem ser usados para formatar um número com 4 casas decimais (X é o número a ser escrito). Teste-os!\n","print(\"O numero %.4f escrito na tela\" % X)\n","print(\"O numero {:.4f} escrito na tela\".format(X))\n","\n","Há um conjunto de testes no qual seu programa deve funcionar. Caso seu programa não passe nos testes, ele receberá nota zero.\n","\n","Submeta apenas um arquivo *.py.\n","Você pode usar os cadernos do Google Colab para fazer seu código, não esqueça de baixar o arquivo como *.py.\n","Coloque seu nome e número de matrícula comentados no começo do arquivo.\n"],"metadata":{"id":"zTXd_xfBeFS2"}},{"cell_type":"code","source":["import pandas as pd\n","from google.colab import files\n","import io\n","\n","arquivos = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":215},"id":"obsDjmWxyUka","executionInfo":{"status":"ok","timestamp":1688752064370,"user_tz":180,"elapsed":222518,"user":{"displayName":"Enrico Zangirolami Raimundo","userId":"09695178106704529302"}},"outputId":"17efc358-dee9-4e12-fecc-1bde31d91860"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-0bebc2c9-faa1-44d2-8104-5471339a5b40\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0bebc2c9-faa1-44d2-8104-5471339a5b40\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving saopaulo.csv to saopaulo.csv\n","Saving belem.csv to belem.csv\n","Saving florianopolis.csv to florianopolis.csv\n","Saving riodejaneiro.csv to riodejaneiro.csv\n","Saving vitoria.csv to vitoria.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","nome = input()\n","df = pd.read_csv(nome)\n","\n","D = int(input())\n","M = int(input())\n","R = float(input())\n","\n","print(\"Mediana da densidade do ar: %.2f\" % float(df[\"Densidade do ar {kg/m3}\"].median()),\"kg/m3\")\n","print(\"Maxima velocidade do vento: %.2f\" % float(df[\"Velocidade do Vento {m/s}\"].max()),\"m/s\")\n","print(\"Entalpia minima: %.2f\" % float(df[\"Entalpia {BTU/LB}\"].min()),\"btu/lb\")\n","busca = df.query(\"Dia == \" + str(D) + \" and Mes == \" + str(M))\n","print(\"Media da direcao do vento no dia\",D ,\"do mes\",M ,\":\",\"%.2f\" % float(busca[\"Direcao do Vento {graus}\"].mean()),\"graus\")\n","print(len(df.query(\"`Rad Direta Normal {Wh/m2}` >=\" + str(R))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bI6XMsgZoMed","executionInfo":{"status":"ok","timestamp":1688743875677,"user_tz":180,"elapsed":13502,"user":{"displayName":"Enrico Zangirolami Raimundo","userId":"09695178106704529302"}},"outputId":"4f038c10-ea94-4410-f6d7-b3bb508355b9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["belem.csv\n","10\n","2\n","200\n","Mediana da densidade do ar: 1.15 kg/m3\n","Maxima velocidade do vento: 10.00 m/s\n","Entalpia minima: 55.80 btu/lb\n","Media da direcao do vento no dia 10 do mes 2 : 75.00 graus\n","2309\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","nome = input()\n","df = pd.read_csv(nome)\n","D = int(input())\n","M = int(input())\n","\n","busca = df.query(\"Dia == \" + str(D) + \" and Mes == \" + str(M))\n","print(\"Media da direcao do vento no dia\",D ,\"do mes\",str(M) + \":\",\"%.2f\" % float(busca[\"Direcao do Vento {graus}\"].mean()),\"graus\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"usgHFUD3cgjY","executionInfo":{"status":"ok","timestamp":1688752356695,"user_tz":180,"elapsed":7849,"user":{"displayName":"Enrico Zangirolami Raimundo","userId":"09695178106704529302"}},"outputId":"e22bcfc1-7af9-46b6-8544-3b31d4e85123"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["belem.csv\n","10\n","2\n","Media da direcao do vento no dia 10 do mes 2: 75.00 graus\n"]}]}]}