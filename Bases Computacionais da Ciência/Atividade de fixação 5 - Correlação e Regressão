{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyOqu6+Cdvgme9056EWQk0G+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Disponível a partir de: sexta, 21 Jul 2023, 08:00\n"," Data de entrega: sábado, 22 Jul 2023, 12:00\n"," Número máximo de arquivos: 1\n","Tipo de trabalho:  Trabalho individual\n","Esta atividade de fixação vale nota.\n","Prazo de entrega: recomendado entregar durante a aula do dia 21/julho, mas pode entregar até 22/julho/2023 12:00. O professor não tirará dúvidas desta atividade fora da sala de aula. Problemas técnicos não serão aceitos como desculpa para entregas atrasadas.\n","\n","Este programa usará os mesmos arquivos CSV usados na Atividade de aplicação 3 - Dados meteorológicos. Faça um programa que leia uma string com o nome de um arquivo CSV. Depois, leia o arquivo usando a biblioteca pandas, e imprima os seguintes dados na saída padrão (todos arredondados com quatros casas decimais):\n","Correlação entre os campos \"Pressao Atmosferica {kPa}\" e \"T. Pto Orvalho {C}\";\n","Índice \"a\" da equação \"y = ax + b\" que representa a regressão linear que usa os dados de \"Pressao Atmosferica {kPa}\" como entrada para X e \"T. Pto Orvalho {C}\" para Y;\n","Índice \"b\" da equação do item anterior.\n","\n","Exemplo de entrada:\n","belem.csv\n","Exemplo de saída:\n","0.0330\n","0.1857\n","4.0761\n","\n","Todos os arquivos usados nos testes automáticos estão disponibilizados conforme descrito na Atividade de aplicação 3 - Dados meteorológicos.\n","Há um conjunto de testes no qual seu programa deve funcionar. Caso seu programa não passe nos testes, ele receberá nota zero.\n","\n","Submeta apenas um arquivo *.py.\n","Você pode usar os cadernos do Google Colab para fazer seu código, não esqueça de baixar o arquivo como *.py.\n","Coloque seu nome e número de matrícula comentados no começo do arquivo.\n"],"metadata":{"id":"HPT5TIQbi6PH"}},{"cell_type":"code","source":["import pandas\n","from google.colab import files\n","import io\n","\n","arquivos = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":212},"id":"gFQdNNOTi8cP","executionInfo":{"status":"ok","timestamp":1689944775942,"user_tz":180,"elapsed":58863,"user":{"displayName":"Enrico Zangirolami Raimundo","userId":"09695178106704529302"}},"outputId":"ef8d7cb0-32d2-40db-e4fd-86f420e1fa8c"},"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a0b55ee1-4e44-46fa-9c80-05e813785321\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a0b55ee1-4e44-46fa-9c80-05e813785321\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving vitoria.csv to vitoria.csv\n","Saving saopaulo.csv to saopaulo.csv\n","Saving florianopolis.csv to florianopolis.csv\n","Saving riodejaneiro.csv to riodejaneiro.csv\n","Saving belem.csv to belem.csv\n"]}]},{"cell_type":"code","source":["import pandas\n","import numpy\n","\n","nome = input()\n","df = pandas.read_csv(nome)\n","\n","print(\"%.4f\" % df[ 'Pressao Atmosferica {kPa}' ].corr(df[ 'T. Pto Orvalho {C}' ]))\n","\n","(a, b) = numpy.polyfit(x=df['Pressao Atmosferica {kPa}'], y=df['T. Pto Orvalho {C}'], deg = 1)\n","\n","print(\"%.4f\" % a)\n","print(\"%.4f\" % b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"polpgtdDjx7P","executionInfo":{"status":"ok","timestamp":1689945561517,"user_tz":180,"elapsed":2416,"user":{"displayName":"Enrico Zangirolami Raimundo","userId":"09695178106704529302"}},"outputId":"564329cd-5e20-429c-a841-ea47c16f7d82"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["belem.csv\n","0.0330\n","0.1857\n","4.0761\n"]}]}]}