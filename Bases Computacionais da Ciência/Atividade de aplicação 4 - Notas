{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyORmjK45YKKie6N5Sg/hZe1"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Disponível a partir de: sexta, 21 Jul 2023, 08:00\n"," Data de entrega: quinta, 27 Jul 2023, 12:00\n"," Número máximo de arquivos: 1\n","Tipo de trabalho:  Trabalho individual\n","Esta atividade de aplicação vale nota.\n","Prazo de entrega: dia 27/julho 12:00. Não deixe para última hora. Problemas técnicos não serão aceitos como desculpa para entregas atrasadas.\n","\n","Há um conjunto de testes no qual seu programa deve funcionar. Caso seu programa não passe nos testes, ele receberá nota zero.\n","\n","O objetivo deste trabalho é analisar o arquivo \"notas.csv\" (disponível na Unidade 6) e fazer cálculos de correlação e regressão linear.\n","\n","Nesta atividade, vamos focar nas colunas de notas do CSV. Leia dois inteiros M e N da entrada. Esses inteiros representam quais campos do CSV serão considerados. Se, por exemplo, M=1 e N=5, você deve considerar os campos nota_tarefa1 e nota_tarefa5, respectivamente. A partir dessa leitura, Você deve imprimir as seguintes linhas na tela:\n","\n","\"Correlacao: X.XX\", em que \"X.XX\" é a correlação entre os dois campos considerados, apresentada com duas casas decimais;\n","Se a correlação for maior ou igual a 0,9, ou menor ou igual a -0,9, você deve imprimir a frase \"Correlacao muito forte\";\n","Se a correlação for maior ou igual a 0,7 e menor que 0,9, ou menor ou igual a -0,7 e maior que -0,9, você deve imprimir a frase \"Correlacao forte\";\n","Imprima na tela uma linha com o coeficiente A e outra com o coeficiente B, ambos com duas casas decimais. Os coeficientes A e B são aqueles obtidos pela regressão linear considerando o campo M como eixo X e o campo N como eixo Y (qual é o significado desses coeficientes?)\n","Exemplo de entrada 1:\n","1\n","2\n","Exemplo de saída 1:\n","Correlacao: 0.92\n","Correlacao muito forte\n","0.90\n","-0.15\n","\n","Submeta apenas um arquivo *.py.\n","Você pode usar os cadernos do Google Colab para fazer seu código, não esqueça de baixar o arquivo como *.py.\n","Coloque seu nome e número de matrícula comentados no começo do arquivo.\n"],"metadata":{"id":"xxeAVEgEjFcG"}},{"cell_type":"code","source":["import pandas\n","import io\n","from google.colab import files\n","\n","\n","arquivos = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"Od3XuTzQoHie","executionInfo":{"status":"ok","timestamp":1689945982506,"user_tz":180,"elapsed":12815,"user":{"displayName":"Enrico Zangirolami Raimundo","userId":"09695178106704529302"}},"outputId":"f8756693-5d26-4c5e-b431-dc354b0e5f46"},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f1563eeb-beef-4134-97b2-90b81afcb8c0\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f1563eeb-beef-4134-97b2-90b81afcb8c0\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving notas.csv to notas.csv\n"]}]},{"cell_type":"code","source":["import pandas\n","import numpy\n","\n","df = pandas.read_csv(\"notas.csv\")\n","m = input()\n","n = input()\n","\n","notaa = 'nota_tarefa'+m\n","notab = 'nota_tarefa'+n\n","\n","(a, b) = numpy.polyfit(x=df[notaa], y=df[notab], deg = 1)\n","\n","cor = df[notaa].corr(df[notab])\n","print(\"Correlacao b\", \"%.2f\" % cor)\n","\n","if cor >= 0.9 or cor <= -0.9:\n","  print(\"Correlacao muito forte\")\n","elif 0.7 <= cor > 0.9 or  -0.9 < cor >= -0.7:\n","  print(\"Correlacao forte\")\n","\n","print(\"%.2f\" % a)\n","print(\"%.2f\" % b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WGYqMp1LoI72","executionInfo":{"status":"ok","timestamp":1689947716713,"user_tz":180,"elapsed":3101,"user":{"displayName":"Enrico Zangirolami Raimundo","userId":"09695178106704529302"}},"outputId":"5f1bfed6-c313-44a4-ad2f-f0a69205bdd7"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","Correlacao: 0.92 \n","Correlacao muito forte\n","0.90 \n","-0.15 \n"]}]}]}