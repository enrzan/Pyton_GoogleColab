{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[],"authorship_tag":"ABX9TyPs6C4AusGxPCu4iIUDDiXm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Q5n5cWVQ3mD1"},"outputs":[],"source":["# Q1\n","def ler_matriz(n, m): # define a função que lerá a matriz\n","    matriz = [] # define a matriz\n","    for _ in range(n):\n","        linha = list(map(int, input().split())) # define a linha que conterá o vetor, com m números\n","        matriz.append(linha) # armazena a linha na matriz\n","    return matriz # retorna a função matriz\n","\n","def contar_ocorrencias(linha): # define a função que verificará de as linhas são permutações uma das outras\n","    contagem = [0] * 22\n","    for numero in linha:\n","        contagem[numero] += 1\n","    return contagem\n","\n","def sao_permutacoes_linhas_pares(matriz, n, m): # define a função que dará o resultado final, como \"SIM\" ou \"NÃO\"\n","    contagem_referencia = contar_ocorrencias(matriz[0])\n","\n","    for i in range(2, n, 2):\n","        contagem_atual = contar_ocorrencias(matriz[i])\n","        if contagem_atual != contagem_referencia:\n","            return \"NÃO\" # caso pelo menos uma das linhas não seja permutação das outras\n","\n","    return \"SIM\" # caso as linhas pares sejam premutações umas das outras\n","\n","def main(): # define o final do programa, para apenas imprimir os resultados\n","    n = int(input()) # o usuário coloca o número n de linha\n","    m = int(input()) # o usuário coloca o número m de colunas\n","    matriz = ler_matriz(n, m)\n","    resultado = sao_permutacoes_linhas_pares(matriz, n, m) # define o resultado\n","    print(f\"Permutações linhas pares = {resultado}\") # imprime a resposta como Permutações linhas pares = SIM ou NÃO\"\n","\n","main() # finaliza o programa"]},{"cell_type":"code","source":["# Q2.py\n","def main(): # define a função\n","    N = int(input()) # o usuário coloca o número de alunos\n","\n","    idades_input = input() # o usuário coloca a idade de cada aluno na mesma linha\n","    vet1_idade = [] # armazena a idade dos alunos\n","    numero = \"\"\n","    for char in idades_input: # define o método para armazenar corretamente as idades\n","        if char != \" \":\n","            numero += char\n","        else:\n","            vet1_idade.append(int(numero))\n","            numero = \"\"\n","    vet1_idade.append(int(numero))\n","\n","    nomes_input = input() # o usuário coloca o nome dos alunos na mesma linha\n","    vet1_nome = []\n","    nome = \"\"\n","    for char in nomes_input: # define o método para armazenar corretamente os nomes\n","        if char != \" \":\n","            nome += char\n","        else:\n","            vet1_nome.append(nome)\n","            nome = \"\"\n","    vet1_nome.append(nome)\n","    vet2_idade = []\n","    vet2_nome = []\n","\n","    for i in range(N): # define os alunos que estão na devida faixa etária (entre 16 a 23)\n","        if 16 <= vet1_idade[i] <= 23:\n","            vet2_idade.append(vet1_idade[i])\n","            vet2_nome.append(vet1_nome[i])\n","\n","    soma_idades = 0 # cria uma variavel \"soma_idades\" vazia\n","    for idade in vet2_idade:\n","        soma_idades += idade # soma a idade em \"soma_idades\" para possibiltar o calculo da média de idade\n","\n","    if len(vet2_idade) > 0:\n","        media_idade = soma_idades / len(vet2_idade) # calcula a média das idades\n","    else:\n","        media_idade = 0\n","\n","    print(f\"Média das idades entre 16 e 23: {media_idade:.2f}\") # imprime a média das idades entre 16 e 23\n","    print(\"Aluno    Idade\") # imprime \"Aluno    Idade\"\n","    for i in range(len(vet2_idade)):\n","        print(f\"{vet2_nome[i]}    {vet2_idade[i]}\") # imprime o nome do aluno seguido pelo idade desse aluno\n","\n","main() #finaiza o código"],"metadata":{"id":"1PAwO38t3_dA"},"execution_count":null,"outputs":[]}]}