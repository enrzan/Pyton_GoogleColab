{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[],"authorship_tag":"ABX9TyNW3MrTH6Xdgs2z3z6T+dQd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Y_BtbRBsHIHP"},"outputs":[],"source":["# Leitura do número de linhas e colunas\n","n_linhas = int(input())\n","n_colunas = int(input())\n","\n","# Inicialização da matriz\n","matriz = [[0 for c in range(n_colunas)] for l in range(n_linhas)]\n","\n","# Leitura dos elementos da matriz\n","for linha in range(n_linhas):\n","    itens_linha = input().split(\" \")\n","    for coluna in range(n_colunas):\n","        matriz[linha][coluna] = int(itens_linha[coluna])\n","\n","# Função para ordenar uma lista usando Selection Sort\n","def selection_sort(lista):\n","    n = len(lista)\n","    for i in range(n):\n","        # Assume que o menor elemento está na posição i\n","        min_index = i\n","        for j in range(i + 1, n):\n","            if lista[j] < lista[min_index]:\n","                min_index = j\n","        # Troca o menor elemento encontrado com o primeiro elemento não ordenado\n","        lista[i], lista[min_index] = lista[min_index], lista[i]\n","\n","# Ordenação de cada linha da matriz\n","for linha in range(n_linhas):\n","    selection_sort(matriz[linha])\n","\n","# Impressão da matriz resultante\n","for linha in range(n_linhas):\n","    for coluna in range(n_colunas):\n","        print(matriz[linha][coluna], end=\" \")\n","    print()  # Pula para a próxima linha após imprimir todos os elementos da linha atual"]}]}