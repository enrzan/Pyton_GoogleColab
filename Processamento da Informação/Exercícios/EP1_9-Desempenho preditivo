{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNazWH79tGK2shBSfIqqG0D"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["A área de Aprendizado de Máquina tem crescido bastante nos últimos anos. Uma tarefa importante nesse contexto é a classificação. Algoritmos de classificação são capazes de aprender a partir de experiência prévia (e.g. dados históricos). Os classificadores podem então realizar predições para novos dados. Por exemplo, um algoritmo de classificação pode aprender a partir de e-mails antigos e se eles foram classificados como spam ou não spam pelos usuários. Depois, o classificador treinado poderá predizer se novos e-mails são spam ou não. Esse também é um exemplo de classificação binária, em que há duas classes possíveis: spam ou não spam.\n","\n","O desempenho de classificadores binários pode ser medido utilizando uma série de métricas. Nesse contexto, existe um conceito conhecido como matriz de confusão. Essa matriz é preenchida com a contagem de predições corretas e incorretas realizadas pelo classificador. A matriz de confusão tem o seguinte formato:\n","\n","\n"," \t \tClasse predita\n"," \t \tPositiva\tNegativa\n","Classe verdadeira\tPositiva\tVP\tFN\n","Negativa\tFP\tVN\n","\n","Nessa matriz, positiva e negativa representam as duas classes. No caso do spam, a classe positiva poderia representar classificar um e-mail como spam e a negativa classificar como não spam. Os valores na matriz são:\n","VP: número de vezes que exemplos positivos foram classificados corretamente como positivos\n","FN: número de vezes que exemplos positivos foram classificados de forma incorreta como negativos\n","FP: número de vezes que exemplos negativos foram classificados de forma incorreta como positivos\n","VN: número de vezes que exemplos negativos foram classificados corretamente como negativos\n","\n","Exemplo de matriz preenchida:\n","\n","\n"," \t \tClasse predita\n"," \t \tPositiva\tNegativa\n","Classe verdadeira\tPositiva\t40\t10\n","Negativa\t15\t35\n","\n","\n","Com base nos valores na matriz de confusão, podem ser calculadas métricas para avaliação de desempenho. Algumas dessas métricas são apresentadas a seguir:\n","\n","Acurácia = VP+VNVP+VN+FP+FN\n","\n","\n","Precisão = VPVP+FP\n","\n","\n","Sensibilidade = VPVP+FN\n","\n","\n","\n","No exemplo apresentado:\n","\n","Acurácia = (40 + 35) / (40 + 35 + 15 + 10) = 0,75\n","Precisão = 40 / (40 + 15) = 0,73\n","Sensibilidade = 40 / (40 + 10) = 0,80\n","\n","Escreva um programa que leia os valores VP, FN, FP e VN e então imprima o valor das métricas acurácia, precisão e sensibilidade.\n","\n","\n","Entrada\n","Valor de VP (inteiro)\n","Valor de FN (inteiro)\n","Valor de FP (inteiro)\n","Valor de VN (inteiro)\n","\n","\n","Saída\n","Acurácia\n","Precisão\n","Sensibilidade\n","Observação: imprima todos os valores com duas casas decimais após a vírgula"],"metadata":{"id":"ow8gL3I66Mft"}},{"cell_type":"code","source":["vp = float(input())\n","fn = float(input())\n","fp = float(input())\n","vn = float(input())\n","\n","a = ((vp+vn)/(vp+vn+fp+fn))\n","p = (vp/(vp+fp))\n","s = (vp/(vp+fn))\n","\n","print(\"%.2f\" % a)\n","print(\"%.2f\" % p)\n","print(\"%.2f\" % s)"],"metadata":{"id":"3qNJj6QK6TAU"},"execution_count":null,"outputs":[]}]}